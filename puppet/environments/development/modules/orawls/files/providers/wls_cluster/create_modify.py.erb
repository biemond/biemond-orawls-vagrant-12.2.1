# check the domain else we need to skip this (done in wls_access.rb)
real_domain='<%= domain %>'

wlst_action = '<%= wlst_action %>'

name                      = '<%= cluster_name %>'
clusteraddress            = '<%= clusteraddress %>'

manage_servers            = False
<% unless servers == '' %>
clusterNodesTargets       = String('<%= servers %>').split(",")
manage_servers            = True
<% end %>

messagingmode             = '<%= messagingmode %>'
migrationbasis            = '<%= migrationbasis %>'
migration_table_name      = '<%= migration_table_name %>'
migration_datasource      = '<%= migration_datasource %>'

datasourceforjobscheduler = '<%= datasourceforjobscheduler %>'

unicastbroadcastchannel   = '<%= unicastbroadcastchannel %>'
multicastaddress          = '<%= multicastaddress %>'
multicastport             = '<%= multicastport %>'

frontendhost              = '<%= frontendhost %>'
frontendhttpport          = '<%= frontendhttpport %>'
frontendhttpsport         = '<%= frontendhttpsport %>'

securereplication         = '<%= securereplication %>'

edit()
startEdit()

try:

  cd('/')
  if wlst_action == 'create':
    print 'Create Cluster';
    cmo.createCluster(name)

  cd('/Clusters/'+name)
  set_attribute_value('ClusterMessagingMode', messagingmode)
  set_attribute_value('ClusterAddress'      , clusteraddress)
  set_attribute_value('FrontendHost'        , frontendhost)
  set_attribute_value('FrontendHTTPPort'    , frontendhttpport)
  set_attribute_value('FrontendHTTPSPort'   , frontendhttpsport)

  set_attribute_value('SecureReplicationEnabled', securereplication)
  set_attribute_value('MigrationBasis'          , migrationbasis)
  set_attribute_value('ClusterAddress'          , clusteraddress)

  if migrationbasis == 'database':
    if migration_datasource:
      cmo.setDataSourceForAutomaticMigration(getMBean('/SystemResources/'+migration_datasource))
    set_attribute_value('AutoMigrationTableName', migration_table_name)

  set_attribute_value('ClusterBroadcastChannel', unicastbroadcastchannel)
  set_attribute_value('MulticastAddress'       , multicastaddress)
  set_attribute_value('MulticastPort'          , multicastport)

  if datasourceforjobscheduler:
    cmo.setDataSourceForJobScheduler(getMBean('/SystemResources/'+datasourceforjobscheduler))

  if manage_servers:
      print 'add servers to cluster'
      clustered = []
      p = ls('/Servers/',returnMap='true')
      if 'inherited' not in clusterNodesTargets:
          for node in clusterNodesTargets:
              cd('/Servers/'+node)
              cmo.setCluster(getMBean('/Clusters/'+name))
      else:
          for token3 in p:
              notes = get('/Servers/'+token3+'/Notes')
              if notes:
                if name in String(notes).split(","):
                  clustered.append(token3)

          for i in clustered:
              cd('/Servers/'+i)
              cmo.setCluster(getMBean('/Clusters/'+name))

  save()
  activate()
  report_back_success()

except:
  print "Unexpected error:", sys.exc_info()[0]
  undo('true','y')
  stopEdit('y')
  report_back_error()
  raise
