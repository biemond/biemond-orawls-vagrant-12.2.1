
def quote(text):
    if text or text == '':
        return "\"" + str(text).replace("\"", "\"\"") + "\""
    else:
        return ""

m = ls('/Clusters',returnMap='true')

f = open("/tmp/wlstScript.out", "w")
print >>f, "name;clusteraddress;servers;messagingmode;migrationbasis;datasourceforjobscheduler;unicastbroadcastchannel;multicastaddress;multicastport;domain;migration_datasource;migration_table_name;frontendhost;frontendhttpport;frontendhttpsport;securereplication"
for token in m:
  print '___'+token+'___'
  cd('/Clusters/'+token)

  clusteraddress = get('ClusterAddress')

  datasourceforMigrationMbean = get('DataSourceForAutomaticMigration')
  if datasourceforMigrationMbean:
     path = getPath(datasourceforMigrationMbean)
     cd("/"+path)
     datasourceMigration = get('Name')
     cd('/Clusters/'+token)
  else:
     datasourceMigration = ''


  datasourceforjobschedulerMbean = cmo.getDataSourceForJobScheduler()
  if datasourceforjobschedulerMbean:
     path = getPath(datasourceforjobschedulerMbean)
     cd("/"+path)
     datasourceforjobscheduler = get('Name')
     cd('/Clusters/'+token)
  else:
     datasourceforjobscheduler = ''

  n = ls('/Clusters/'+token+'/Servers',returnMap='true')
  servers = []
  for token2 in n:
    servers.append(token2)

  print "1"
  p = ls('/Servers/',returnMap='true')
  clustered = []
  present = 1
  cluster_result = ''

  print "1"
  for token3 in p:
    print "2 "+ token3
    notes = get('/Servers/'+token3+'/Notes')
    if notes:
      if token in notes:
         print "3 "+ token3
         clustered.append(token3)

  if clustered:
    for i in clustered:
      if(i not in servers):
        present = 0

    if present != 1:
      cluster_result = 'not_inherited'
    else:
      cluster_result = 'inherited'

  cd('/Clusters/'+token)
  pwd()
  ls()
  if not clustered:
    print >>f, ";".join(map(quote, [domain+'/'+token,clusteraddress,','.join(servers),get('ClusterMessagingMode'),get('MigrationBasis'),datasourceforjobscheduler,get('ClusterBroadcastChannel'),get('MulticastAddress'),get('MulticastPort'),domain,datasourceMigration,get('AutoMigrationTableName'),get('FrontendHost'),get('FrontendHTTPPort'),get('FrontendHTTPSPort'),get('SecureReplicationEnabled')]))
  else:
    print >>f, ";".join(map(quote, [domain+'/'+token,clusteraddress,cluster_result,get('ClusterMessagingMode'),get('MigrationBasis'),datasourceforjobscheduler,get('ClusterBroadcastChannel'),get('MulticastAddress'),get('MulticastPort'),domain,datasourceMigration,get('AutoMigrationTableName'),get('FrontendHost'),get('FrontendHTTPPort'),get('FrontendHTTPSPort'),get('SecureReplicationEnabled')]))
f.close()
print "~~~~COMMAND SUCCESFULL~~~~"
