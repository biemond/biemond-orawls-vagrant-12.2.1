# check the domain else we need to skip this (done in wls_access.rb)
real_domain='<%= domain %>'

manage_arguments      = False
manage_classpath      = False
manage_bea_home       = False
manage_listenaddress  = False
manage_machine        = False

name          = '<%= server_name %>'

<% unless arguments.nil? %>
arguments        = '<%= arguments.join(' ') %>'
manage_arguments = True
<% end %>

<% unless bea_home.nil? %>
bea_home         = '<%= bea_home %>'
manage_bea_home  = True
<% end %>

<% unless classpath.nil? %>
classpath        = '<%= classpath %>'
manage_classpath = True
<% end %>

<% unless listenaddress.nil? %>
listenAddress        = '<%= listenaddress %>'
manage_listenaddress = True
<% end %>

<% unless machine.nil? %>
machineName    = '<%= machine %>'
manage_machine = True
<% end %>

logFilename                      = '<%= logfilename %>'
log_http_Filename                = '<%= log_http_filename %>'
log_http_format                  = '<%= log_http_format %>'
log_http_format_type             = '<%= log_http_format_type %>'
log_http_file_count              = '<%= log_http_file_count %>'
log_http_number_of_files_limited = '<%= log_http_number_of_files_limited %>'

log_datasource_Filename       = '<%= log_datasource_filename %>'
log_file_min_size             = '<%= log_file_min_size %>'
log_filecount                 = '<%= log_filecount %>'
log_rotate_logon_startup      = '<%= log_rotate_logon_startup %>'
log_rotationtype              = '<%= log_rotationtype %>'
log_number_of_files_limited   = '<%= log_number_of_files_limited %>'
log_redirect_stderr_to_server = '<%= log_redirect_stderr_to_server %>'
log_redirect_stdout_to_server = '<%= log_redirect_stdout_to_server %>'
log_date_pattern              = '<%= log_date_pattern %>'

restart_max       = '<%= restart_max %>'
listenPort    = '<%= listenport %>'
listenPortEnabled = '<%= listenportenabled %>'
sslEnabled    = '<%= sslenabled %>'
sslHostnameVerificationIgnored = '<%= sslhostnameverificationignored %>'
sslhostnameverifier = '<%= sslhostnameverifier %>'
two_way_ssl = '<%= two_way_ssl %>'
client_certificate_enforced = '<%= client_certificate_enforced %>'
sslListenPort = '<%= ssllistenport %>'
logintimeout  = '<%= logintimeout %>'
useservercerts = '<%= useservercerts %>'

jsseenabled   = '<%= jsseenabled %>'
tunnelingenabled  = '<%= tunnelingenabled %>'

custom_identity                        = '<%= custom_identity %>'
custom_identity_keystore_filename      = '<%= custom_identity_keystore_filename %>'
custom_identity_keystore_passphrase    = '<%= custom_identity_keystore_passphrase %>'
custom_identity_alias                  = '<%= custom_identity_alias %>'
custom_identity_privatekey_passphrase  = '<%= custom_identity_privatekey_passphrase %>'
trust_keystore_file                    = '<%= trust_keystore_file %>'
trust_keystore_passphrase              = '<%= trust_keystore_passphrase %>'

default_file_store                     = '<%= default_file_store %>'
max_message_size                       = '<%= max_message_size %>'
weblogic_plugin_enabled                = '<%= weblogic_plugin_enabled %>'
auto_restart                           = '<%= auto_restart %>'
autokillwfail                          = '<%= autokillwfail %>'

server_parameters          = '<%= server_parameters %>'

frontend_host                  = '<%= frontendhost %>'
frontend_http_port             = '<%= frontendhttpport %>'
frontend_https_port            = '<%= frontendhttpsport %>'

edit()
startEdit()

try:

    cd('/Servers/'+name)

    if manage_machine:
      if machineName == "":
        cmo.setMachine(None)
      else:
        set('Machine',getMBean('/Machines/'+machineName))

    print "Change Notes"
    if server_parameters:
      cmo.setNotes(server_parameters)

    if manage_listenaddress:
      if listenAddress == "" or listenAddress == " ":
        set('ListenAddress',None)
      else:
        set('ListenAddress',listenAddress)

    if listenPort:
      set('ListenPort', int(listenPort))

    if listenPortEnabled and listenPortEnabled != '-1':
      set('ListenPortEnabled', format_boolean(listenPortEnabled))

    if logintimeout:
      set('LoginTimeoutMillis', int(logintimeout))

    if max_message_size:
      set('MaxMessageSize',max_message_size)

    if restart_max:
      set('RestartMax',restart_max)

    if manage_arguments:
      if arguments == "":
        set('ServerStart/'+name+'/Arguments', None)
      else:
        set('ServerStart/'+name+'/Arguments', arguments)

    if manage_bea_home:
      if bea_home == "":
        set('ServerStart/'+name+'/BeaHome', None)
      else:
        set('ServerStart/'+name+'/BeaHome', bea_home)

    if manage_classpath:
      if classpath == "":
        set('ServerStart/'+name+'/ClassPath', None)
      else:
        set('ServerStart/'+name+'/ClassPath', classpath)

    if tunnelingenabled:
      set('TunnelingEnabled', format_boolean(tunnelingenabled))

    if weblogic_plugin_enabled:
      set('WeblogicPluginEnabled', format_boolean(weblogic_plugin_enabled))

    if custom_identity == '1':
      set('KeyStores'                                ,'CustomIdentityAndCustomTrust')
      set('CustomIdentityKeyStoreFileName'           ,custom_identity_keystore_filename)
      set('CustomIdentityKeyStorePassPhrase'         ,custom_identity_keystore_passphrase)
      set('CustomTrustKeyStoreFileName'              ,trust_keystore_file)
      set('CustomTrustKeyStorePassPhrase'            ,trust_keystore_passphrase)
      cd('SSL/'+name)
      set('ServerPrivateKeyAlias'                    ,custom_identity_alias)
      set('ServerPrivateKeyPassPhrase'               ,custom_identity_privatekey_passphrase)
    if custom_identity == '0':
      set('KeyStores'                                ,'DemoIdentityAndDemoTrust')


    cd('/Servers/'+name)
    if auto_restart == '0':
      print "Change AutoRestart"
      set('AutoRestart','False')
    else:
      print "Change AutoRestart"
      set('AutoRestart','True')

    if autokillwfail == '1':
      print "Change AutoKillIfFailed"
      set('AutoKillIfFailed','True')
    else:
      print "Change AutoKillIfFailed"
      set('AutoKillIfFailed','False')

    cd('/Servers/'+name+'/WebServer/'+name)

    if frontend_host:
      print "Setting Frontend Host"
      cmo.setFrontendHost(frontend_host)

    print "Setting Frontend HTTP Port"
    cmo.setFrontendHTTPPort(int(frontend_http_port))

    print "Setting Frontend HTTPS Port"
    cmo.setFrontendHTTPSPort(int(frontend_https_port))

    print "Change SSL"
    cd('/Servers/'+name+'/SSL/'+name)

    if sslEnabled and sslEnabled != '-1':
      set('Enabled', format_boolean(sslEnabled))
    if jsseenabled and jsseenabled != '-1':
      set('JSSEEnabled', format_boolean(jsseenabled))
    if sslHostnameVerificationIgnored and sslHostnameVerificationIgnored != '-1':
      set('HostnameVerificationIgnored', format_boolean(sslHostnameVerificationIgnored))
      if sslHostnameVerificationIgnored == '0' and sslhostnameverifier:
        set('HostnameVerifier', sslhostnameverifier)
    if two_way_ssl:
      set('TwoWaySSLEnabled'           , format_boolean(two_way_ssl))
    if client_certificate_enforced:
      set('ClientCertificateEnforced'  , format_boolean(client_certificate_enforced))
    if sslListenPort:
      set('ListenPort', int(sslListenPort))
    if useservercerts:
      set('UseServerCerts' , format_boolean(useservercerts))

    cd('/Servers/'+name+'/Log/'+name)
    if logFilename:
      set('FileName', logFilename)
    if log_rotationtype:
      cmo.setRotationType(log_rotationtype)
    if log_rotate_logon_startup:
      cmo.setRotateLogOnStartup(format_boolean2(log_rotate_logon_startup))
    if log_filecount:
      cmo.setFileCount(int(log_filecount))
    if log_number_of_files_limited:
      cmo.setNumberOfFilesLimited(int(log_number_of_files_limited))
    if log_file_min_size:
      cmo.setFileMinSize(int(log_file_min_size))
    if log_date_pattern:
      print "change log_date_pattern"
      cmo.setDateFormatPattern(log_date_pattern)

    if log_redirect_stderr_to_server == '1':
      cmo.setRedirectStderrToServerLogEnabled(true)
    else:
      cmo.setRedirectStderrToServerLogEnabled(false)

    if log_redirect_stdout_to_server == '1':
      cmo.setRedirectStdoutToServerLogEnabled(true)
    else:
      cmo.setRedirectStdoutToServerLogEnabled(false)


    print "web server log: " + name
    cd('/Servers/'+name+'/WebServer/'+name+'/WebServerLog/'+name)
    if log_http_number_of_files_limited:
      cmo.setNumberOfFilesLimited(int(log_http_number_of_files_limited))
    if log_http_file_count:
      cmo.setFileCount(int(log_http_file_count))
    if log_http_Filename:
      cmo.setFileName(log_http_Filename)
    if log_rotationtype:
      cmo.setRotationType(log_rotationtype)
    if log_rotate_logon_startup:
      cmo.setRotateLogOnStartup(format_boolean2(log_rotate_logon_startup))
    if log_filecount:
      cmo.setFileCount(int(log_filecount))
    if log_file_min_size:
      cmo.setFileMinSize(int(log_file_min_size))
    if log_http_format_type:
      cmo.setLogFileFormat(log_http_format_type)
    if log_http_format:
      cmo.setELFFields(log_http_format)

    print "datasource server log: " + name
    cd('/Servers/'+name+'/DataSource/'+name+'/DataSourceLogFile/'+name)
    if log_datasource_Filename:
      set('FileName', log_datasource_Filename)
    if log_rotationtype:
      cmo.setRotationType(log_rotationtype)
    if log_rotate_logon_startup:
      cmo.setRotateLogOnStartup(format_boolean2(log_rotate_logon_startup))
    if log_filecount:
      cmo.setFileCount(int(log_filecount))
    if log_number_of_files_limited:
      cmo.setNumberOfFilesLimited(int(log_number_of_files_limited))
    if log_file_min_size:
      cmo.setFileMinSize(int(log_file_min_size))

    cd('/Servers/'+name+'/DefaultFileStore/'+name)
    if default_file_store:
      cmo.setDirectory(default_file_store)

    cd('/')
    DOMAIN_PATH = get('RootDirectory')

    save()
    activate()
    print "~~~~COMMAND SUCCESFULL~~~~"


except:
    print "Unexpected error:", sys.exc_info()[0]
    undo('true','y')
    stopEdit('y')
    print "~~~~COMMAND FAILED~~~~"
    raise
